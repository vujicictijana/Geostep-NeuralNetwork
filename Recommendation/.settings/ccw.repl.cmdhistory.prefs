cmdhistory=["(create-list (first rez))" "(cat-numbers (first rez))" "(map \#(str %) *1)" "(map \#(clojure.string/join % ,) *2)" "(map \#(clojure.string/join % \\",\\") *2)" "(map \#(clojure.string/join (str %) \\",\\") *2)" " (cat-numbers (first rez))" "(map \#(clojure.string/join (str %) \\",\\") *1)" "(map \#(clojure.string/join (str %)) *1)" "(map \#(str %) *1)" " (cat-numbers (first rez))" "(map \#(str %) *1)" "(map \#(clojure.string/join [(str %) \\",\\"\\n                            ]) *1)" " (cat-numbers (first rez))" "(map \#(clojure.string/join [(str %) \\",\\"\\n                            ]) *1)" "(str *1)" "(reduce \#(clojure.string/join [(str %) \\",\\"\\n                            ]) *1)" " (cat-numbers (first rez))" "(reduce \#(clojure.string/join [(str %) \\",\\"\\n                            ]) *1)" "(reduce (clojure.string/join (str %) ) *1)" "(reduce (clojure.string/join) *1)" "(reduce (clojure.string/join \\",\\") *1)" "(map \#(str %) *1)" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                        (map \#((.append writer (read-int-array (cat-numbers %)))  (get-clues-categories)))" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                        (map \#((.append writer (read-int-array (cat-numbers %))))  (get-clues-categories))))" "(defn read-int-array[array] (map \#(str %) array))" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                        (map \#((.append writer (read-int-array (cat-numbers %))))  (get-clues-categories))))" "(create-file \\"aa\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                        (map \#(.append writer (read-int-array (cat-numbers %)))  (get-clues-categories))))" "(create-file \\"aa\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                        (map \#(.append writer (read-int-array (cat-numbers %)))  (get-clues-categories))))" "(create-file \\"aa\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (.append writer \\"aaaaaaaaaaaaaaaa\\")))" "(create-file \\"aa\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (.append writer \\"aaaaaaaaaaaaaaaa\\")\\n                          (.close writer))" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (.append writer \\"aaaaaaaaaaaaaaaa\\")\\n                          (.close writer)))" "(create-file \\"aaa\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (map \#(.append writer %)  (get-clues-categories))\\n                          (.close writer)))" "(create-file \\"aaaa\\")" "(get-clues-categories)" "(def rez *1)" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (map \#(.append writer %)  rez)\\n                          (.close writer)))" "  (map \#(str %)  rez)" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (map \#(.append writer %)  rez)\\n                          (.close writer)))" "(create-file \\"bb\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (map \#(.append writer (str %))  rez)\\n                          (.close writer)))" "(create-file \\"bbb\\")" "(map \#(str %)  rez)" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (map \#(.append writer \\"a\\")  rez)\\n                          (.close writer)))" "(create-file \\"bbbb\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (do (map \#(.append writer \\"a\\")  rez)\\n                          (.close writer))))" "(create-file \\"x\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (do (map \#(.append writer \\"a\\")  rez)\\n                          (.close writer))))" "(def s \\"\\")" "(defn prepare-item-data[item]\\r\\n   (def s (clojure.string/join  s item)))" "(prepare-item-data \\"a\\")" "s" "(prepare-item-data \\"afdds\\")" "s" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (do (map \#(prepare-item-data %)  rez)\\n                          (.append s))))" "(create-file \\"sas\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (do (map \#(prepare-item-data %)  rez)\\n                          (.append writer s))))" "(create-file \\"sas\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (do (map \#(prepare-item-data %)  rez)\\n                          (.append writer s)\\n                          (.close writer)))" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (do (map \#(prepare-item-data %)  rez)\\n                          (.append writer s)\\n                          (.close writer))))" "(create-file \\"sasa\\")" "(defn prepare-data (map \#(prepare-item-data %)  rez))" "(defn prepare-data[] (map \#(prepare-item-data %)  rez))" "(prepare-data)" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (.append writer (prepare-data))\\n                          (.close writer)))" "(create-file \\"sasaa\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (.append writer \#(prepare-data))\\n                          (.close writer)))" "(create-file \\"sasaa\\")" "(defn prepare-data[] (map \#(prepare-item-data %)  rez))" "(defn create-file[name] (let [writer (new FileWriter name)]\\n                          (.append writer s)\\n                          (.close writer)))" "(create-file \\"sasaa\\")" ";; Switching to recommendation.training namespace" "(prepare-data)" "s" "(defn prepare-item-data[item]\\r\\n   (def s (clojure.string/join  s (cat-numbers item))))" "(prepare-data)" "s" "(def s \\"\\")" "(defn prepare-item-data[item]\\r\\n   (def s (clojure.string/join  s (cat-numbers item))))" "(prepare-data)" "s" "(cat-numbers (first rez))" "(map \#(str %) *1)" ";; Switching to recommendation.training namespace" "(clojure.core/ns recommendation.training)\\n(def rez (get-clues-categories))\\n(clojure.core/ns user)" "(cat-numbers (first rez))" "(clojure.core/ns recommendation.training)\\n(defn cat-numbers[categories] (.returnCategoriesCount (new ReadClues) (create-list categories)))\\n(clojure.core/ns user)" "(cat-numbers (first rez))" "(clojure.core/ns recommendation.training)\\n(ns recommendation.training\\n   (\:require recommendation.game-category)\\n   (\:import [java.io FileWriter]\\n            [java.util ArrayList]\\n            [fi.foyt.foursqare.myapi ReadClues]))\\n(clojure.core/ns user)" ";; Switching to recommendation.training namespace" "(cat-numbers (first rez))" "(map \#(str %) *1)" "category-list" "(create-list (first rez))" "(first rez)" "(cat-numbers (first rez))" "(map \#(str %) *1)" "(create-list (first rez))" "category-list" "rez" "(create-list (first rez))" "(first-rez)" "(first rez)" "(create-list (first rez))" "category-list" "(defn create-list[categories] (do (map \#(.add category-list %) categories)\\n                                category-list))" "(create-list (first rez))" "category-list" "(defn create-list[categories] (map \#(.add category-list %) categories)" "(defn create-list[categories] (map \#(.add category-list %) categories))" "(create-list (first rez))" "category-list" "(defn create-list[categories] (map \#(.add category-list %) categories) category-list)" "(create-list (first rez))" ";; Switching to recommendation.training namespace" "(create-list (first rez))" "rez" "(create-list (first rez))" "(defn create-list[categories] (map \#(.add category-list %) categories))" "(create-list (first rez))" "category-list" "(defn cat-numbers[categories] (do\\n                                (create-list categories)\\n                                (.returnCategoriesCount (new ReadClues) category-list )))" "(cat-numbers (first rez))" "(map \#(str %) *1)" ";; Switching to recommendation.training namespace" "(cat-numbers (first rez))" "(map \#(str %) *1)" "rez" "(cat-numbers (first rez))" "(map \#(str %) *1)" "(defn create-list[categories] (let [a (map \#(.add category-list %) categories)]\\n                                category-list))" "(create-list (first rez))" "(defn create-list[categories] (map \#(.add category-list %) categories))" "(def category-list (new ArrayList))" "(defn create-list[categories] (map \#(.add category-list %) categories))" "(create-list (first rez))" "category-list" "(cat-numbers (first rez))" "(map \#(str %) *1)" "(cat-numbers (second rez))" "(map \#(str %) *1)" "(create-list (second rez))" "(cat-numbers (second rez))" "(map \#(str %) *1)" "category-list" "(defn cat-numbers[categories] (do\\n                                (create-list categories)\\n                                (def category-list (new ArrayList))\\n                                (.returnCategoriesCount (new ReadClues) category-list )))" "(defn cat-numbers[categories] (do\\n                                (create-list categories)\\n                                (.returnCategoriesCount (new ReadClues) category-list )                                \\n                                (def category-list (new ArrayList))))" "(cat-numbers (second rez))" "category-list" "(defn cat-numbers[categories] (do\\n                                (def category-list (new ArrayList))\\n                                (create-list categories)\\n                                (.returnCategoriesCount (new ReadClues) category-list )))" "(cat-numbers (second rez))" "(map \#(str %) *1)" "(create-list (second rez))" "(cat-numbers (second rez))" "(map \#(str %) *1)" "(cat-numbers (second rez))" "(map \#(str %) *1)" "rez" "(first rez)" "(str *1)" "(into-array String (first rez))" ";; Switching to recommendation.training namespace" "(def rez (get-clues-categories))" "rez" "(.returnCategoriesCount (new ReadClues) (first rez))" "(.returnCategoriesCount (new ReadClues) (into-array String (first rez)))" "(map \#(.returnCategoriesCount (new ReadClues) (into-array String %)) rez)" ";; Switching to recommendation.training namespace" "(def rez (get-clues-categories))" "rez" "(map \#(.returnCategoriesCount (new ReadClues) (into-array String %)) rez)" ";; Switching to recommendation.training namespace" "rez" "(categories-count)" ";; Switching to recommendation.training namespace" "(categories-count)" " (map \#(str %) (categories-count))" "(defn create-file[name] (let [writer (new FileWriter name)]\\r\\n                         (map \#(.append writer %) (categories-count))\\r\\n                          (.close writer)))" "(def rez (get-clues-categories))" "rez" "(defn get-clues-categories[] (map \#(recommendation.game-category/get-my-category %) rez))" "(defn create-file[name] (let [writer (new FileWriter name)]\\r\\n                         (map \#(.append writer %) (categories-count))\\r\\n                          (.close writer)))" "(create-file \\"aaaaaaaaaaa\\")" "(defn create-file[name] (let [writer (new FileWriter name)]\\r\\n                         (map \#(.append writer %) (categories-count))))" "(create-file \\"c\\")" "(defn cao[] (map \#(str %) (categories-count)))" "(cao)" " (map \#(str %) (categories-count))" " (map \#(println %) (categories-count))" "(categories-count)" "(defn categories-count[] (map \#(.returnCategoriesCount (new ReadClues) (into-array String %)) rez))" "(categories-count)" "(apply str *1)" ";; Switching to recommendation.training namespace" "(def rez (get-clues-categories))" ";; Switching to recommendation.training namespace" "(ns recommendation.training\\n   (\:require recommendation.game-category)\\n   (\:import [java.io FileWriter]\\n            [java.util ArrayList]\\n            [fi.foyt.foursqare.myapi ReadClues]))" "(def games-for-training [\\"142670/1\\" \\"550643/1\\" \\"291201/1\\"\\n                         ;\\"971396/1\\" \\"789590/1\\" \\"733542/1\\" \\n                        ; \\"463454/1\\" \\"710354/1\\" \\"314029/1\\" \\"239673/1\\" \\"342813/1\\" \\"822701/1\\" \\n                        ; \\"591401/1\\" \\"414578/1\\" \\"706711/0\\" \\"789833/0\\" \\"312628/0\\" \\"603090/0\\"\\n                        ; \\"146841/0\\" \\"762494/0\\" \\"354248/1\\" \\"580098/1\\" \\"110783/1\\" \\"943178/0\\"\\n                        ; \\"359216/1\\" \\"617655/0\\" \\"338401/0\\" \\"682723/1\\" \\"423989/1\\" \\"847835/1\\" \\n                        ; \\"416368/1\\" \\"122189/1\\" \\"818277/1\\" \\"390605/0\\" \\"196552/0\\" \\"903062/1\\" \\n                        ; \\"304465/1\\" \\"961613/1\\" \\"716192/1\\" \\"911491/1\\" \\"273180/1\\" \\"124555/1\\" \\n                         ;\\"204558/1\\" \\"448981/1\\" \\"311014/1\\" \\"903046/0\\" \\"876092/0\\" \\"737221/0\\" \\n                        ; \\"969300/0\\" \\"630699/0\\"\\n                        ])" "(defn get-games-numbers[] (map \#(first %)  (map \#(clojure.string/split  % \#\\"/\\") games-for-training )))" "(defn get-clues-categories[] (map \#(recommendation.game-category/get-my-category %) rez))" "(def rez (get-clues-categories))" "(defn get-clues-categories[] (map \#(recommendation.game-category/get-my-category %) (get-games-numbers)))" "(def rez (get-clues-categories))" "rez" "(defn categories-count[] (map \#(.returnCategoriesCount (new ReadClues) (into-array String %)) rez))" "(categories-count)" "(apply str *1)" "(println *1)" "(defn cao[] (apply str *1))" "(defn prepare-for-file[] (apply str *1))" "(defn create-file[name] (let [writer (new FileWriter name)]\\r\\n                         (.append writer (prepare-for-file))\\r\\n                          (.close writer)))" "(prepare-for-file)" "(defn prepare-for-file[] (apply str (categories-count)))" "(prepare-for-file)" "(defn create-file[name] (let [writer (new FileWriter name)]\\r\\n                         (.append writer (prepare-for-file))\\r\\n                          (.close writer)))" "(create-file \\"aa\\")" "(get-games-numbers)" "(map \#(str %) *1)" "rez" "(defn get-clues-categories[] (map \#(str (recommendation.game-category/get-my-category %) %) (get-games-numbers)))" "(get-clues-categories)" "(defn get-clues-categories[] (map \#( (recommendation.game-category/get-my-category %) %) (get-games-numbers)))" "(get-clues-categories)" "(defn get-clues-categories[] (map \#( (recommendation.game-category/get-my-category %) (str %)) (get-games-numbers)))" "(get-clues-categories)" "(defn get-clues-categories[] (map \#([ (recommendation.game-category/get-my-category %) (str %)]) (get-games-numbers)))" "(get-clues-categories)" "(prepare-for-file)" "rez" "(first *1)" "(type *1)" "(defn get-clues-categories[] (map \#(conj (recommendation.game-category/get-my-category %) %) (get-games-numbers)))" "(get-clues-categories)" "(defn get-clues-categories[] (map \#(conj % (recommendation.game-category/get-my-category %) ) (get-games-numbers)))" "(get-clues-categories)" "(defn get-clues-categories[] (map \#(conj (recommendation.game-category/get-my-category %) %) (get-games-numbers)))" "(get-clues-categories)" "(defn get-clues-categories[] (map \#(conj (recommendation.game-category/get-my-category (clojure.string/split  % \#\\"/\\")) %) games-for-training))" "(get-clues-categories)" "(defn get-clues-categories[] (map \#(conj (recommendation.game-category/get-my-category %) %) (get-games-numbers)))" "(get-clues-categories)" "(def rez (get-clues-categories))" "(defn get-clues-categories[] (map \#(conj (recommendation.game-category/get-my-category %) %) (get-games-numbers)))" "(get-clues-categories)" ";; Switching to recommendation.training namespace" "(get-clues-categories)" "(prepare-for-file)" "(defn get-clues-categories2[] (map \#(conj (recommendation.game-category/get-my-category (first (clojure.string/split % \#\\"/\\"))) %) games-for-training))" "(get-clues-categories)" "(get-clues-categories2)" "(defn get-clues-categories2[] (map \#(conj (recommendation.game-category/get-my-category (first (clojure.string/split % \#\\"/\\"))) (first (clojure.string/split % \#\\"/\\"))) games-for-training))" "(get-clues-categories2)" "(defn get-clues-categories2[] (map \#(conj (recommendation.game-category/get-my-category (first (clojure.string/split % \#\\"/\\")) (second (clojure.string/split % \#\\"/\\"))) (first (clojure.string/split % \#\\"/\\"))) games-for-training))" "(get-clues-categories2)" "(defn get-clues-categories2[] (map \#(conj (recommendation.game-category/get-my-category (first (clojure.string/split % \#\\"/\\"))) (first (clojure.string/split % \#\\"/\\")) (second (clojure.string/split % \#\\"/\\"))) games-for-training))" "(get-clues-categories2)" "(defn get-clues-categories2[] (map \#(conj (recommendation.game-category/get-my-category (first (clojure.string/split % \#\\"/\\"))) (second (clojure.string/split % \#\\"/\\")) (first (clojure.string/split % \#\\"/\\")) ) games-for-training))" "(get-clues-categories2)" ";; Switching to recommendation.training namespace" "rez" "(prepare-for-file)" "(create-file \\"asdas\\")" ";; Switching to recommendation.training namespace" "(clojure.core/ns recommendation.training)\\n(defn categories-count[] (map \#(.returnCategoriesCount (new ReadClues) (into-array String %)) (get-clues-categories)))\\n(clojure.core/ns user)" "(create-file \\"nas\\")" ";; Switching to recommendation.training namespace" "(create-file \\"nas\\")" ";; Switching to recommendation.training namespace" "(create-file \\"dataset\\")" ";; Switching to recommendation.training namespace" "(create-file \\"dataset2\\")" "(create-file \\"dataset\\")" ";; Switching to recommendation.neural-network namespace" "(defn get-clues-categories[game-id] (recommendation.game-category/get-my-category game-id))" "(defn categories-count[game-id] (.returnCategoriesCount (new ReadClues) (into-array String (get-clues-categories game-id))) )" "(categories-count \\"142670\\")" "(categories-count \\"550643\\")" "(get-clues-categories game-id)" "(get-clues-categories \\"142670\\")" "(defn get-clues-categories[game-id] (conj (recommendation.game-category/get-my-category game-id) game-id))" "(get-clues-categories \\"142670\\")" "(defn get-clues-categories[game-id] (conj (recommendation.game-category/get-my-category game-id) game-id \\"\\"))" "(get-clues-categories \\"142670\\")" "(defn get-clues-categories[game-id] (conj (recommendation.game-category/get-my-category game-id) \\"\\" game-id ))" "(get-clues-categories \\"142670\\")" "(categories-count \\"142670\\")" "(defn normalize[text] (clojure.string/split text \#\\",\\"))" "(normalize *1)" "(defn normalize[text] (clojure.string/split (str text) \#\\",\\"))" "(normalize \\"0,1,3,2,1,366,\\\\n\\")" "(defn normalize[text] (clojure.string/split  (clojure.string/replace (str text) \#\\",\\\\n\\" \\"\\")  \#\\",\\"))" "(normalize \\"0,1,3,2,1,366,\\\\n\\")" "(type *1)" "(def my-vector [\\"0\\" \\"1\\" \\"3\\" \\"2\\" \\"1\\" \\"366\\"])" "(pop my-vector)" "my-vector" "(pop (pop my-vector))" "(reduce + *1)" "(map \#(read-string %) (pop (pop my-vector)))" "(reduce + (map \#(read-string %) (pop (pop my-vector))))" "(defn sum [game-id] (reduce + (map \#(read-string %) (pop (pop (normalize (categories-count game-id)))))))" "(defn sum-categories [text] (reduce + (map \#(read-string %) (pop (pop (normalize text))))))" "(sum-categories (categories-count \\"142670\\"))" "(map \#(/ (read-string %) sum-categories) (pop (pop my-vector)))" "(map \#(/ (read-string %) (sum-categories [\\"0\\" \\"1\\" \\"3\\" \\"2\\"]) (pop (pop my-vector))))" "(map \#(/ (read-string %) (sum-categories [\\"0\\" \\"1\\" \\"3\\" \\"2\\"])) (pop (pop my-vector)))" "my-vector" "(map \#(/ (read-string %) (sum-categories [\\"0\\" \\"1\\" \\"3\\" \\"2\\"])) (pop (pop my-vector)))" "(map \#(/ (read-string %) (sum-categories [\\"0\\" \\"1\\" \\"3\\" \\"2\\" \\"1\\" \\"366\\"])) (pop (pop my-vector)))" "(sum-categories [\\"0\\" \\"1\\" \\"3\\" \\"2\\" \\"1\\" \\"366\\"])" "(normalize [\\"0\\" \\"1\\" \\"3\\" \\"2\\" \\"1\\" \\"366\\"])" "(map \#(/ (read-string %) (sum-categories \\"0,1,3,2,1,366,\\\\n\\")) (pop (pop my-vector)))" "(defn calc[text] (let [sum (sum-categories text)]\\n                   (map \#(/ (read-string %) sum) (pop (pop (normalize text))))))" "(calc \\"0,1,3,2,1,366,\\\\n\\")" "(defn calc[text] (let [sum (sum-categories text)]\\n                   (map \#(/ (read-string %) sum) (pop (pop (normalize text))))\\n                   sum))" "(calc \\"0,1,3,2,1,366,\\\\n\\")" "(defn calc[text] (let [sum (sum-categories text)]\\n                   (map \#(double (/ (read-string %) sum)) (pop (pop (normalize text))))\\n                   sum))" "(calc \\"0,1,3,2,1,366,\\\\n\\")" "(defn calc[text] (let [sum (sum-categories text)]\\n                   (map \#(double (/ (read-string %) sum)) (pop (pop (normalize text))))))" "(defn calc[text] (let [sum (sum-categories text)]\\n                   (map \#(double (/ (read-string %) sum)) (pop (pop (normalize text)))))" "(defn calc[text] (let [sum (sum-categories text)]\\n                   (map \#(double (/ (read-string %) sum)) (pop (pop (normalize text))))))" "(calc \\"0,1,3,2,1,366,\\\\n\\")" ";; Switching to recommendation.neural-network namespace" "(calc \\"0,1,3,2,1,366,\\\\n\\")" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(peek (get-vector  \\"0,1,3,2,1,366,\\\\n\\"))" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                   ; (conj \\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))))" "(peek (get-vector  \\"0,1,3,2,1,366,\\\\n\\"))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj \\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                     (peek (pop vector)))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj \\n                                      (peek (pop vector))\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                     )))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj \\n                                      [(read-string (peek (pop vector)))]\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                     )))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj \\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector))))))" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (map \#(double (/ (read-string %) sum)) (pop (pop vector)))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(conj *1 1)" "(conj [1 2 3] 4)" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(conj '*1 1)" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj\\n                                    '(map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                    (read-string (peek (pop vector))))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                      (read-string (peek (pop vector))))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                      (read-string (peek (pop vector)))\\n                                      (read-string (peek  vector)))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                      (read-string (peek (pop vector)))\\n                                      (double (/ (read-string (peek  vector)) 1500)))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn conj*\\r\\n  [s x]\\r\\n  (conj (vec s) x))" "(conj* (0.0 0.1666666666666667 0.5 0.3333333333333333) 1)" "(conj* [1 2 3] 1)" "(conj* [1 2 3] 8)" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj*\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                      (read-string (peek (pop vector)))\\n                                      (double (/ (read-string (peek  vector)) 1500)))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn conj*\\r\\n  [s x y]\\r\\n  (conj (vec s) x y))" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj*\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                      (read-string (peek (pop vector)))\\n                                      (double (/ (read-string (peek  vector)) 1500)))))" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj*\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                      (read-string (peek (pop vector)))\\n                                      (double (/ (read-string (peek  vector)) 1500)))))" ";; Switching to recommendation.neural-network namespace" "(calculate-categories (get-clues-categories 142670 ))" "(get-clues-categories 142670)" "(get-clues-categories \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(calculate-categories (get-clues-categories \\"142670\\" ))" "(get-clues-categories \\"142670\\" )" ";; Switching to recommendation.neural-network namespace" "(calculate-categories (categories-count \\"142670\\" ))" "(categories-count \\"142670\\" )" "(get-clues-categories \\"142670\\")" " (get-clues-categories \\"550643\\")" "(clojure.core/ns recommendation.training)\\n(def games-for-training [\\"142670/1\\" \\n                         ;\\"550643/1\\" \\"291201/1\\"\\n                        ; \\"971396/1\\" \\"789590/1\\" \\"733542/1\\" \\n                        ; \\"463454/1\\" \\"710354/1\\" \\"314029/1\\" \\"239673/1\\" \\"342813/1\\" \\"822701/1\\" \\n                         ;\\"591401/1\\" \\"414578/1\\" \\"706711/0\\" \\"789833/0\\" \\"312628/0\\" \\"603090/0\\"\\n                         ;\\"146841/0\\" \\"762494/0\\" \\"354248/1\\" \\"580098/1\\" \\"110783/1\\" \\"943178/0\\"\\n                        ; \\"359216/1\\" \\"617655/0\\" \\"338401/0\\" \\"682723/1\\" \\"423989/1\\" \\"847835/1\\" \\n                         ;\\"416368/1\\" \\"122189/1\\" \\"818277/1\\" \\"390605/0\\" \\"196552/0\\" \\"903062/1\\" \\n                        ; \\"304465/1\\" \\"961613/1\\" \\"716192/1\\" \\"911491/1\\" \\"273180/1\\" \\"124555/1\\" \\n                        ; \\"204558/1\\" \\"448981/1\\" \\"311014/1\\" \\"903046/0\\" \\"876092/0\\" \\"737221/0\\" \\n                        ; \\"969300/0\\" \\"630699/0\\"\\n                        ])\\n(clojure.core/ns recommendation.neural-network)" "(get-clues-categories)" ";; Switching to recommendation.training namespace" "(get-clues-categories)" ";; Switching to recommendation.neural-network namespace" "(get-clues-categories \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(get-clues-categories \\"142670\\")" "(categories-count \\"142670\\")" "1" "\\r\\n(defn kuku[] (map \#(conj (recommendation.game-category/get-my-category (first (clojure.string/split % \#\\"/\\"))) (second (clojure.string/split % \#\\"/\\")) (first (clojure.string/split % \#\\"/\\")) ) [\\"142670/1\\"] ))" "(kuku)" "(map \#(.returnCategoriesCount (new ReadClues) (into-array String %)) *1)" ";; Switching to recommendation.training namespace" "(create-file \\"aa\\")" ";; Switching to recommendation.training namespace" "(create-file \\"aa\\")" "(def games-for-training [\\"142670/1\\" \\"550643/1\\" \\"291201/1\\"\\n                         \\"971396/1\\" \\"789590/1\\" \\"733542/1\\" \\n                         \\"463454/1\\" \\"710354/1\\" \\"314029/1\\" \\"239673/1\\" \\"342813/1\\" \\"822701/1\\" \\n                         \\"591401/1\\" \\"414578/1\\" \\"706711/0\\" \\"789833/0\\" \\"312628/0\\" \\"603090/0\\"\\n                         \\"146841/0\\" \\"762494/0\\" \\"354248/1\\" \\"580098/1\\" \\"110783/1\\" \\"943178/0\\"\\n                         \\"359216/1\\" \\"617655/0\\" \\"338401/0\\" \\"682723/1\\" \\"423989/1\\" \\"847835/1\\" \\n                         \\"416368/1\\" \\"122189/1\\" \\"818277/1\\" \\"390605/0\\" \\"196552/0\\" \\"903062/1\\" \\n                         \\"304465/1\\" \\"961613/1\\" \\"716192/1\\" \\"911491/1\\" \\"273180/1\\" \\"124555/1\\" \\n                         \\"204558/1\\" \\"448981/1\\" \\"311014/1\\" \\"903046/0\\" \\"876092/0\\" \\"737221/0\\" \\n                         \\"969300/0\\" \\"630699/0\\"\\n                        ])" "(create-file \\"aa\\")" ";; Switching to recommendation.neural-network namespace" "(calculate-categories (categories-count \\"142670\\"))" "1" "(into-array Double *2)" "(into-array Double [0.0 0.333])" "(into-array Double (calculate-categories (categories-count \\"142670\\")))" "(into-array String (calculate-categories (categories-count \\"142670\\")))" "(into-array String [0.0 0.3333333333333333 0.3333333333333333 0.3333333333333333 1 0.244])" "(into-array String [0.0 0.3333333333333333])" "(into-array String [0.0 0.333])" "(into-array Double [0.0 0.333])" "(into-array Double [0.0 0.3333333333333333 0.3333333333333333 0.3333333333333333 1 0.244])" "(into-array Double [0.0 0.3333333333333333])" "(into-array Double [0.0 0.3333333333333333 0.3333333333333333])" "(into-array Double [0.0 0.3333333333333333 0.3333333333333333 0.3333333333333333])" "(into-array Double [0.0 0.3333333333333333 0.3333333333333333 0.3333333333333333  1 ])" "(defn calculate-categories [text] (let [sum (sum-categories text)\\n                                        vector (get-vector text)]\\n                                    (conj*\\n                                      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n                                      (double (read-string (peek (pop vector))))\\n                                      (double (/ (read-string (peek  vector)) 1500)))))" "(into-array Double (calculate-categories (categories-count \\"142670\\")))" "(map \#(str %) *1)" "(defn call-get-result[game-id] (into-array Double (calculate-categories (categories-count game-id))))" "(call-get-result \\"142670\\")" "(map \#(str %) *1)" ";; Switching to recommendation.neural-network namespace" "(defn call-get-result[game-id] (let [network (new GeostepNeuralNetwrok)]\\n                                 (.getResult network (into-array Double (calculate-categories (categories-count game-id))))))" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" "(defn call-get-result[game-id] (let [network (new GeostepNeuralNetwrok)]\\n                                 (.getResult  GeostepNeuralNetwrok (into-array Double (calculate-categories (categories-count game-id))))))" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" "(defn call-get-result[game-id] (let [network (new GeostepNeuralNetwrok)]\\n                                 (.getResult  network (into-array Double (calculate-categories (categories-count game-id))))))" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(call-get-result \\"142670\\")" "(defn get-relevant[game-id] (if (> (call-get-result \\"142670\\") 0.75)\\n                              \\"relevant\\"\\n                              \\"not relevant\\"))" "(get-relevant \\"142670\\")" ";; Switching to recommendation.neural-network namespace" "(get-relevant \\"630699\\")" ";; Switching to recommendation.neural-network namespace" "(get-relevant \\"630699\\")" "(call-get-result \\"630699\\")" ";; Switching to recommendation.neural-network namespace" "(get-relevant \\"142670\\")" "(call-get-result \\"630699\\")" "(call-get-result \\"830269\\")" "(get-relevant \\"830269\\")" "(if (> 10 0.75)\\r\\n                              \\"relevant\\"\\r\\n                              \\"irrelevant\\")" "(if (> 0.5 0.75)\\r\\n                              \\"relevant\\"\\r\\n                              \\"irrelevant\\")" "(if (> 3.014954567658594E-14 0.75)\\r\\n                              \\"relevant\\"\\r\\n                              \\"irrelevant\\")" "(defn get-relevant[game-id] (if (> (call-get-result game-id) 0.75)\\n                              \\"relevant\\"\\n                              \\"irrelevant\\"))" "(get-relevant \\"830269\\")" "(call-get-result \\"676021\\")" "(get-relevant \\"676021\\")" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.game-category namespace" "(check-category \\"4d4b7105d754a06377d81259\\")" "(get-clues 142670)" "(get-clues \\"142670\\")" "(first *1)" "(type *1)" "{\\"a\\" \\"a\\"}" "(type *1)" "(get-clues \\"142670\\")" "(type *1)" ";; Switching to recommendation.game-category namespace" "(get-my-category \\"142670\\")" "(type *1)" "(get-category \\"37.707703, -97.267741\\" 50)" "(get-clues \\"142670\\")" "(type *1)" "(get-clues \\"142670\\")" "(prepare-clue-data (first *1))" "(check-category \\"4d4b7105d754a06377d81259\\")" ";; Switching to recommendation.training namespace" "games-for-training" "(type *1)" "(get-clues-categories)" "(type *1)" "*2" "(first *1)" "(type *1)" "(categories-count)" ";; Switching to recommendation.training namespace" "(categories-count)" ";; Switching to recommendation.training namespace" "(def games-for-training [\\"142670/1\\" \\n                         ;\\"550643/1\\" \\"291201/1\\" \\"971396/1\\" \\"789590/1\\" \\"733542/1\\"                         \\n                         ;\\"463454/1\\" \\"710354/1\\" \\"314029/1\\" \\"239673/1\\" \\"342813/1\\" \\"822701/1\\" \\n                         ;\\"591401/1\\" \\"414578/1\\" \\"706711/0\\" \\"789833/0\\" \\"312628/0\\" \\"603090/0\\"\\n                        ; \\"146841/0\\" \\"762494/0\\" \\"354248/1\\" \\"580098/1\\" \\"110783/1\\" \\"943178/0\\"\\n                         ;\\"359216/1\\" \\"617655/0\\" \\"338401/0\\" \\"682723/1\\" \\"423989/1\\" \\"847835/1\\" \\n                         ;\\"416368/1\\" \\"122189/1\\" \\"818277/1\\" \\"390605/0\\" \\"196552/0\\" \\"903062/1\\" \\n                         ;\\"304465/1\\" \\"961613/1\\" \\"716192/1\\" \\"911491/1\\" \\"273180/1\\" \\"124555/1\\" \\n                         ;\\"204558/1\\" \\"448981/1\\" \\"311014/1\\" \\"903046/0\\" \\"876092/0\\" \\"737221/0\\" \\n                         ;\\"969300/0\\" \\"630699/0\\"\\n                         ])" "(categories-count)" "(type *1)" "(def games-for-training [\\"142670/1\\" \\"550643/1\\" \\"291201/1\\" \\"971396/1\\" \\"789590/1\\" \\"733542/1\\"                         \\n                         \\"463454/1\\" \\"710354/1\\" \\"314029/1\\" \\"239673/1\\" \\"342813/1\\" \\"822701/1\\" \\n                         \\"591401/1\\" \\"414578/1\\" \\"706711/0\\" \\"789833/0\\" \\"312628/0\\" \\"603090/0\\"\\n                         \\"146841/0\\" \\"762494/0\\" \\"354248/1\\" \\"580098/1\\" \\"110783/1\\" \\"943178/0\\"\\n                         \\"359216/1\\" \\"617655/0\\" \\"338401/0\\" \\"682723/1\\" \\"423989/1\\" \\"847835/1\\" \\n                         \\"416368/1\\" \\"122189/1\\" \\"818277/1\\" \\"390605/0\\" \\"196552/0\\" \\"903062/1\\" \\n                         \\"304465/1\\" \\"961613/1\\" \\"716192/1\\" \\"911491/1\\" \\"273180/1\\" \\"124555/1\\" \\n                         \\"204558/1\\" \\"448981/1\\" \\"311014/1\\" \\"903046/0\\" \\"876092/0\\" \\"737221/0\\" \\n                         \\"969300/0\\" \\"630699/0\\"])" "(categories-count)" ";; Switching to recommendation.neural-network namespace" "(get-clues-categories \\"142670\\")" "(type *1)" "(categories-count \\"142670\\")" "(get-vector *1)" "(sum-categories *1)" "(sum-categories \\"0,1,3,2,1,366,\\\\n\\")" "(conj \\"a\\" \\"a\\")" "(conj [\\"a\\" \\"b\\"] \\"c\\")" "(conj* [\\"a\\" \\"b\\"] \\"c\\")" "(conj* [\\"a\\" \\"b\\"] \\"c\\" \\"d\\")" "(vec [\\"a\\" \\"b\\"])" "(calculate-categories \\"0,1,3,2,1,366,\\\\n\\")" "(type *1)" "(call-get-result \\"142670\\")" ";; Switching to recommendation.routes.home namespace" "(defn is-game-relevant [game-id] (neural-network/get-relevant game-id))" "(is-game-relevant \\"142670\\")" ";; Switching to recommendation.repl namespace" "(start-server)" "(is-game-relevant \\"142670\\")" ";; Switching to recommendation.routes.home namespace" "(is-game-relevant \\"142670\\")" ";; Switching to recommendation.game-category namespace" "(get-clues \\"142670\\")" ";; Switching to recommendation.game-category namespace" "(get-clues \\"142670\\")" ";; Switching to recommendation.game-category namespace" "(get-clues \\"142670\\")" "(start-server)" "(stop-server)" "(start-server)" ";; Switching to recommendation.game-category namespace" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/a\\" [] \\"aaa\\")\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/a\\" [] \\" <a href\=\\\\\\"doc\\\\index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(defroutes home-routes\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/a\\" [] \\" <a href\=\\\\\\"doc\\\\\\\\index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))" "(defroutes home-routes\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/a\\" [] \\" <a href\=\\\\\\"file\:///doc/index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))" "(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"../doc/index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))" "(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"../doc/index.html\\\\\\">Doocumentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"file\:///../doc/index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"C\:/Users/Tijana/git/vujicictijana/Geostep-NeuralNetwork/Recommendation/doc/index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"C\:\\\\\\\\Users\\\\\\\\Tijana\\\\\\\\git\\\\\\\\vujicictijana\\\\\\\\Geostep-NeuralNetwork\\\\\\\\Recommendation\\\\\\\\doc\\\\\\\\index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"file\:///C\:\\\\\\\\Users\\\\\\\\Tijana\\\\\\\\git\\\\\\\\vujicictijana\\\\\\\\Geostep-NeuralNetwork\\\\\\\\Recommendation\\\\\\\\doc\\\\\\\\index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"C\:\\\\\\\\Users\\\\\\\\Tijana\\\\\\\\git\\\\\\\\vujicictijana\\\\\\\\Geostep-NeuralNetwork\\\\\\\\Recommendation\\\\\\\\doc\\\\\\\\index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"file\:///C\:/Users/Tijana/git/vujicictijana/Geostep-NeuralNetwork/Recommendation/doc/index.html\\\\\\">Documentation</a> \\")\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=/doc\\\\\\"l\\\\\\">Documentation</a>\\")\\n  (GET \\"/doc\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=/doc\\\\\\"l\\\\\\">Documentation</a>\\")\\n  (GET \\"/doc\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=/doc\\\\\\">Documentation</a>\\")\\n  ;;(GET \\"/doc\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"/doc\\\\\\">Documentation</a>\\")\\n  ;;(GET \\"/doc\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(stop-server)" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"http\://localhost\:8181/doc\\\\\\">Documentation</a>\\")\\n  ;;(GET \\"/doc\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"http\://localhost\:8181/doc\\\\\\">Documentation</a>\\")\\n  (GET \\"/doc\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(stop-server)" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n ;; (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"http\://localhost\:8181/doc\\\\\\">Documentation</a>\\")\\n  (GET \\"/doc\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.routes.home namespace" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n ;; (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"http\://localhost\:8181/doc\\\\\\">Documentation</a>\\")\\n  (GET \\"/\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n ;; (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"http\://localhost\:8181/doc\\\\\\">Documentation</a>\\")\\n  (GET \\"/\\" [] (clojure.java.io/resource \\"..doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n ;; (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br> <a href\=\\\\\\"http\://localhost\:8181/doc\\\\\\">Documentation</a>\\")\\n  (GET \\"/doc\\" [] (clojure.java.io/resource \\"resources/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> </br>\\")\\n  (GET \\"/documentation\\" [] (clojure.java.io/resource \\"resources/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br> <a href\=\\\\\\"/documentation\\\\\\">Documentation</a></br>\\")\\n  (GET \\"/documentation\\" [] (clojure.java.io/resource \\"resources/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\n(ns recommendation.routes.home\\r\\n  (\:require[compojure.core \:refer \:all]\\r\\n           [recommendation.views.layout \:as layout]\\n           [recommendation.neural-network \:as neural-network]\\n           [ring.util.response \:as resp])\\r\\n  (\:import [java.io File]\\r\\n           ;[org.apache.mahout.cf.taste.impl.model.file FileDataModel]\\r\\n         ;  [org.apache.mahout.cf.taste.impl.neighborhood ThresholdUserNeighborhood]\\r\\n         ;  [org.apache.mahout.cf.taste.impl.similarity PearsonCorrelationSimilarity]\\r\\n         ;  [org.apache.mahout.cf.taste.impl.recommender GenericUserBasedRecommender]\\n         ))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" "(clojure.core/ns recommendation.routes.home)\\nnull\\n(clojure.core/ns recommendation.repl)" "(clojure.core/ns recommendation.routes.home)\\n(defroutes home-routes  \\r\\n  (GET \\"/\\" [] \\"Welcome to Geostep project home page\! </br></br>  <a href\=\\\\\\"/documentation\\\\\\">Documentation</a></br>\\")\\n  (GET \\"/documentation\\" [] (resp/redirect \\"../doc/index.html\\"))\\n  (GET \\"/home\\" [user number file] (home user number file))\\n  (GET \\"/neural-network\\" [game-id] (is-game-relevant game-id)))\\n(clojure.core/ns recommendation.repl)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to recommendation.game-category namespace" "(doc check-category)" "(defn check-category \\n  \\"Returns corresponding geostep category by foursquare category ID\\"\\n  [category] \\n  (clojure.string/join \\n    (map \#(if (.contains (% my-map) category) \\n            (name %) \\n            \\"\\") \\n         (keys my-map))))" "(doc check-category)" "(use 'clojure.repl)" "(doc check-category)" "(defn prepare-clue-data\\n  \\"Returns data about clue in required  format\: {\\\\\\"lat,lng\\\\\\" \\\\\\"raduis\\\\\\"}\\"\\n  [clue]\\n  {(clojure.string/join  [(.getLat clue) \\",\\" (.getLng clue)])\\r\\n   (.getRadius clue)})" "(doc prepare-clue-data)" "(defn get-clues \\n  \\"Returns LazySeq that contains data about all clues in game with given id\\"\\n  [game-id]  \\n  (let [read (new ReadClues game-id)\\n        clues (.returnAllClues read)]\\n    (map \#(prepare-clue-data %) clues)))" "(clojure.core/ns recommendation.neural-network)\\n(defn categories-count\\n  \\"Returns string that contains data about game with given id in required  format\: \\n   -number of clues in category \\"bussines\\",\\r\\n   -number of clues in category \\"social\\",\\r\\n   -number of clues in category \\"travel\\",\\r\\n   -number of clues in category \\"irrelevant\\",\\r\\n   -game duration\\"\\n  [game-id] \\n  (.returnCategoriesCount \\n    (new ReadClues) \\n    (into-array String (get-clues-categories game-id))))\\n(clojure.core/ns recommendation.game-category)" "(clojure.core/ns recommendation.neural-network)\\n(defn categories-count\\n  \\"Returns string that contains data about game with given id in required  format\: \\n   -number of clues in category \\\\\\"bussines\\\\\\",\\r\\n   -number of clues in category \\\\\\"social\\\\\\",\\r\\n   -number of clues in category \\\\\\"travel\\\\\\",\\r\\n   -number of clues in category \\\\\\"irrelevant\\\\\\",\\r\\n   -game duration\\"\\n  [game-id] \\n  (.returnCategoriesCount \\n    (new ReadClues) \\n    (into-array String (get-clues-categories game-id))))\\n(clojure.core/ns recommendation.game-category)" "(use 'clojure.repl)" "(clojure.core/ns recommendation.neural-network)\\n(defn categories-count\\n  \\"Returns string that contains data about game with given id in required  format\: \\n   -number of clues in category \\\\\\"bussines\\\\\\",\\r\\n   -number of clues in category \\\\\\"social\\\\\\",\\r\\n   -number of clues in category \\\\\\"travel\\\\\\",\\r\\n   -number of clues in category \\\\\\"irrelevant\\\\\\",\\r\\n   -game duration\\"\\n  [game-id] \\n  (.returnCategoriesCount \\n    (new ReadClues) \\n    (into-array String (get-clues-categories game-id))))\\n(clojure.core/ns recommendation.game-category)" "(doc categiries-count)" "(clojure.core/ns recommendation.neural-network)\\n(defn categories-count\\n  \\"Returns string that contains data about game with given id in required  format\: \\n   -number of clues in category \\\\\\"bussines\\\\\\",\\r\\n   -number of clues in category \\\\\\"social\\\\\\",\\r\\n   -number of clues in category \\\\\\"travel\\\\\\",\\r\\n   -number of clues in category \\\\\\"irrelevant\\\\\\",\\r\\n   -game duration\\"\\n  [game-id] \\n  (.returnCategoriesCount \\n    (new ReadClues) \\n    (into-array String (get-clues-categories game-id))))\\n(clojure.core/ns recommendation.game-category)" "(doc categories-count)" "(clojure.core/ns recommendation.neural-network)\\n(defn categories-count\\n  \\"Returns string that contains data about game with given id in required  format\: \\n   -number of clues in category \\\\\\"bussines\\\\\\",\\r\\n   -number of clues in category \\\\\\"social\\\\\\",\\r\\n   -number of clues in category \\\\\\"travel\\\\\\",\\r\\n   -number of clues in category \\\\\\"irrelevant\\\\\\",\\r\\n   -game duration\\"\\n  [game-id] \\n  (.returnCategoriesCount \\n    (new ReadClues) \\n    (into-array String (get-clues-categories game-id))))\\n(clojure.core/ns recommendation.game-category)" ";; Switching to recommendation.neural-network namespace" "(doc categories-count)" "(use 'clojure.repl)" "(doc categories-count)" "(defn calculate-categories \\n  \\"Returns vector of normalized data that will be given to neural network\\"\\n  [text] \\n  (let [sum (sum-categories text)\\n        vector (get-vector text)]\\n    (conj*\\n      (map \#(double (/ (read-string %) sum)) (pop (pop vector)))\\n      (double (read-string (peek (pop vector))))\\n      (double (/ (read-string (peek  vector)) 1500)))))" "(start-server)" ";; Switching to recommendation.game-category namespace" "(get-my-category \\"4d4b7105d754a06377d81259\\")" "(check-category  \\"4d4b7105d754a06377d81259\\")" "(do (check-category  \\"4d4b7105d754a06377d81259\\")\\n  (check-category  \\"4d4b7105d754a06375d81259\\"))" "(do (check-category  \\"4d4b7105d754a06376d81259\\")\\n  (check-category  \\"4d4b7105d754a06375d81259\\"))" "[ (check-category  \\"4d4b7105d754a06376d81259\\")\\n  (check-category  \\"4d4b7105d754a06375d81259\\")]" "(type *1)" "[ (check-category  \\"4d4b7105d754a06376d81259\\")\\n  (check-category  \\"4d4b7105d754a06375d81259\\")]" "(distinct *1)" "[(check-category  \\"4d4b7105d754a06377d81259\\") (check-category \\"4d4b7105d754a06375d81259\\") (check-category \\"4d4b7104d754a06370d81259\\")]" "(distinct [(check-category  \\"4d4b7105d754a06377d81259\\") (check-category \\"4d4b7105d754a06375d81259\\") (check-category \\"4d4b7104d754a06370d81259\\")])" "(type *1)" "(distinct \\r\\n    [(check-category  \\"4d4b7105d754a06376d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06374d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06373d81259\\")])" "  (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06378d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06379d81259\\")])" " (distinct \\r\\n    [(check-category  \\"000000000000000000000000\\") \\r\\n     (check-category \\"4e67e38e036454776db1fb3a\\") \\r\\n     (check-category \\"4d4b7105d754a06372d81259\\")])" "(check-category \\"a\\")" ";; Switching to Recomendation.core-test namespace" "\\r\\n(fact  \\r\\n  (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")]) \=> (\\"travel\\"))" "(ns Recomendation.core-test\\n  (\:use midje.sweet\\n        Recomendation.game-category ))" "(ns Recomendation.core-test\\n  (\:use midje.sweet\\n        recomendation.game-category ))" ";; Switching to recommendation.game-category namespace" ";; Switching to Recomendation.core-test namespace" "(ns Recomendation.core-test\\n  (\:require recommendation.game-category)\\n  (\:use midje.sweet))" ";; Switching to Recomendation.core-test namespace" "(fact  \\r\\n  (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")]) \=> (\\"travel\\"))" ";; Switching to Recomendation.core-test namespace" "(fact  \\n  (distinct \\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\n     (check-category \\"4d4b7105d754a06375d81259\\") \\n     (check-category \\"4d4b7104d754a06370d81259\\")]) \=> (\\"travel\\"))" "(fact  \\r\\n  (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")]) \=> (\\"travel\\"))" " (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")])" "  (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")]) \=> (\\"travel\\")" "(fact  \\n  (distinct \\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\n     (check-category \\"4d4b7105d754a06375d81259\\") \\n     (check-category \\"4d4b7104d754a06370d81259\\")]) \=> \\"travel\\")" "  (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")])" "(type *1)" "  [(distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")])]" "(fact  \\n  [(distinct \\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\n     (check-category \\"4d4b7105d754a06375d81259\\") \\n     (check-category \\"4d4b7104d754a06370d81259\\")])] \=> [(\\"travel\\")])" "  (str (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")]))" "(fact  \\n  (distinct \\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\n     (check-category \\"4d4b7105d754a06375d81259\\") \\n     (check-category \\"4d4b7104d754a06370d81259\\")]) \=> (lazy-seq \\"travel\\"))" "(lazy-seq \\"a\\")" "(\\"travel\\")" "[\\"travel\\"]" "(type *`1)" "(type *1)" "{\\"travel\\"}" "(distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")])" "(vector (distinct \\r\\n    [(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")]))" "(vector (\\"travel\\"))" "(vector \\"travel\\")" "(str (\\"travel\\"))" "(distinct \\r\\n    {(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")})" "[(check-category  \\"4d4b7105d754a06377d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06375d81259\\") \\r\\n     (check-category \\"4d4b7104d754a06370d81259\\")]" "(fact  \\n  [(check-category  \\"4d4b7105d754a06377d81259\\") \\n     (check-category \\"4d4b7105d754a06375d81259\\") \\n     (check-category \\"4d4b7104d754a06370d81259\\")] \=>[\\"travel\\" \\"travel\\" \\"travel\\"] )" "(fact  \\r\\n  [(check-category  \\"4d4b7105d754a06376d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06374d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06373d81259\\")] \=> [\\"social\\" \\"social\\" \\"social\\"])" "(fact  \\r\\n  [(check-category  \\"4d4b7105d754a06378d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06379d81259\\")] \=> [\\"business\\" \\"business\\"])" "(fact  \\r\\n  [(check-category  \\"000000000000000000000000\\") \\r\\n     (check-category \\"4e67e38e036454776db1fb3a\\") \\r\\n     (check-category \\"4d4b7105d754a06372d81259\\")] \=> [\\"irrelevant\\" \\"irrelevant\\" \\"irrelevant\\"])" "(fact  \\r\\n  [(check-category  \\"4d4b7105d754a06378d81259\\") \\r\\n     (check-category \\"4d4b7105d754a06379d81259\\")] \=> [\\"business\\" \\"business\\"])" "(fact  \\r\\n  [(check-category  \\"000000000000000000000000\\") \\r\\n     (check-category \\"4e67e38e036454776db1fb3a\\") \\r\\n     (check-category \\"4d4b7105d754a06372d81259\\")] \=> [\\"irrelevant\\" \\"irrelevant\\" \\"irrelevant\\"])" "(autotest)" "(get-clues \\"142670\\")" "(prepare-clue-data {\\"42.1006583570572,19.0912690758705\\" \\"40\\"} )" "(prepare-clue-data (new CLue \\"42.1006583570572\\" \\"19.0912690758705\\" \\"40\\") )" ";; Switching to recommendation.game-category namespace" "(prepare-clue-data (new CLue \\"42.1006583570572\\" \\"19.0912690758705\\" \\"40\\") )" " (\:import  [fi.foyt.foursqare.myapi Clue])" "(\:import  [fi.foyt.foursqare.myapi ReadClues Foursquare])" ";; Switching to recommendation.game-category namespace" "(ns recommendation.game-category\\n  (\:import  [fi.foyt.foursqare.myapi ReadClues Foursquare]))" "(ns recommendation.game-category\\n  (\:import  [fi.foyt.foursqare.myapi ReadClues Foursquare]\\n            [main Clue]))" "(prepare-clue-data (new CLue \\"42.1006583570572\\" \\"19.0912690758705\\" \\"40\\") )" ";; Switching to recommendation.game-category namespace" "(prepare-clue-data (new CLue \\"42.1006583570572\\" \\"19.0912690758705\\" \\"40\\") )" "(prepare-clue-data (new Clue \\"42.1006583570572\\" \\"19.0912690758705\\" \\"40\\") )" "(clojure.core/ns Recomendation.core-test)\\n(fact (prepare-clue-data (new Clue \\"42.1006583570572\\" \\"19.0912690758705\\" \\"40\\")) \=> {\\"42.1006583570572,19.0912690758705\\" \\"40\\"})\\n(clojure.core/ns recommendation.game-category)" ";; Switching to Recomendation.core-test namespace" "(ns Recomendation.core-test\\n  (\:use midje.sweet\\n        recommendation.game-category)\\n   (\:import  [fi.foyt.foursqare.myapi ReadClues Foursquare]\\r\\n            [main Clue]))" "(fact (prepare-clue-data (new Clue \\"42.1006583570572\\" \\"19.0912690758705\\" \\"40\\")) \=> {\\"42.1006583570572,19.0912690758705\\" \\"40\\"})" "(get-category \\"42.1006583570572,19.0912690758705\\" \\"40\\")" "(get-category \\"42.1006583570572,19.0912690758705\\" 40)" " (get-category \\"0,0\\" 0)" " (get-category \\"56.000000000000,19.0000000000\\" 40)" " (get-category \\"00.000000000000,00.0000000000\\" 40)" " (get-category \\"56.000000000000,19.0000000000\\" 40)" "(fact (get-category \\"42.1006583570572,19.0912690758705\\" 40) \=> \\"4d4b7104d754a06370d81259\\"\\n      (get-category \\"56.000000000000,19.0000000000\\" 40) \=> \\"000000000000000000000000\\")" ";; Switching to recommendation.game-category namespace" "(defn get-clues \\n  \\"Returns LazySeq that contains data about all clues in game with given id\\"\\n  [game-id path]  \\n  (let [read (new ReadClues game-id nil)\\n        clues (.returnAllClues read)]\\n    (map \#(prepare-clue-data %) clues)))" "(defn get-my-category \\n  \\"Returns LazySeq that contains geostep category for each clue in game with given id\\"\\n  [game-id] \\n  (map \\n    \#(check-category (get-category (first %)(read-string(second %))))   \\n    (map \#(first %) (get-clues game-id))))" ";; Switching to Recomendation.core-test namespace" "(fact (get-my-category \\"142670\\" \\"resources/ReturnGameTest.xml\\") \=> (\\"travel\\" \\"irrelevant\\" \\"irrelevant\\" \\"social\\" \\"travel\\"))" "(get-my-category \\"142670\\" \\"resources/ReturnGameTest.xml\\")" "(get-clues \\"142670\\" \\"resources/ReturnGameTest.xml\\")" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to Recomendation.core-test namespace" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(fact (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\") \=>\\n      ({\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"}))" "(fact (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\") \=>\\n   ({\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"}))" " ({\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"})" "[(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")]" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(vector *1)" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(map \#(first %) *1)" "(map \#(str (first %)) *1)" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(first *1)" "(map \#(vector (first *1)) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(map \#(vector (first %)) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(map \#(vector %) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(str *1)" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(lazy-seq {\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"})" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(vector {\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"})" "\\r\\n(vector ({\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"}))" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(map \#([%]) *1)" "(map \#(%) *1)" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(map \#({%}) *1)" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(map \#({first %}) *1)" "(map \#({%}) *1)" "(map \#({%}) [{\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"}])" "(get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(map \#(str %) *1)" "(println *1)" "(println ({\\"42.1006583570572,19.0912690758705\\" \\"40\\"} {\\"42.1070741587757,19.0890374779701\\" \\"70\\"} {\\"42.1014862389214,19.0935650467873\\" \\"30\\"} {\\"42.0987159764083,19.0962472558022\\" \\"70\\"} {\\"42.0937801513544,19.1355469822884\\" \\"70\\"}))" "(fact (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\") \=>\\n      (\\"{\\\\\\"42.1006583570572,19.0912690758705\\\\\\" \\\\\\"40\\\\\\"}\\" \\"{\\\\\\"42.1070741587757,19.0890374779701\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.1014862389214,19.0935650467873\\\\\\" \\\\\\"30\\\\\\"}\\" \\"{\\\\\\"42.0987159764083,19.0962472558022\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.0937801513544,19.1355469822884\\\\\\" \\\\\\"70\\\\\\"}\\"))" "(fact (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\") \=>\\n     \\"(\\\\\\"{\\\\\\"42.1006583570572,19.0912690758705\\\\\\" \\\\\\"40\\\\\\"}\\" \\"{\\\\\\"42.1070741587757,19.0890374779701\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.1014862389214,19.0935650467873\\\\\\" \\\\\\"30\\\\\\"}\\" \\"{\\\\\\"42.0987159764083,19.0962472558022\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.0937801513544,19.1355469822884\\\\\\" \\\\\\"70\\\\\\"}\\\\\\")\\")" "(map \#(str %) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(fact (map \#(str %) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")) \=>\\n     \\"(\\\\\\"{\\\\\\"42.1006583570572,19.0912690758705\\\\\\" \\\\\\"40\\\\\\"}\\" \\"{\\\\\\"42.1070741587757,19.0890374779701\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.1014862389214,19.0935650467873\\\\\\" \\\\\\"30\\\\\\"}\\" \\"{\\\\\\"42.0987159764083,19.0962472558022\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.0937801513544,19.1355469822884\\\\\\" \\\\\\"70\\\\\\"}\\\\\\")\\")" "(map \#(str %) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(println *1)" "(println  \\"(\\\\\\"{\\\\\\"42.1006583570572,19.0912690758705\\\\\\" \\\\\\"40\\\\\\"}\\" \\"{\\\\\\"42.1070741587757,19.0890374779701\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.1014862389214,19.0935650467873\\\\\\" \\\\\\"30\\\\\\"}\\" \\"{\\\\\\"42.0987159764083,19.0962472558022\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.0937801513544,19.1355469822884\\\\\\" \\\\\\"70\\\\\\"}\\\\\\")\\")" "(fact (map \#(str %) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\")) \=>\\n     \\"({\\\\\\"42.1006583570572,19.0912690758705\\\\\\" \\\\\\"40\\\\\\"}\\" \\"{\\\\\\"42.1070741587757,19.0890374779701\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.1014862389214,19.0935650467873\\\\\\" \\\\\\"30\\\\\\"}\\" \\"{\\\\\\"42.0987159764083,19.0962472558022\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.0937801513544,19.1355469822884\\\\\\" \\\\\\"70\\\\\\"})\\")" " (map \#(str %) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" " \\"({\\\\\\"42.1006583570572,19.0912690758705\\\\\\" \\\\\\"40\\\\\\"}\\" \\"{\\\\\\"42.1070741587757,19.0890374779701\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.1014862389214,19.0935650467873\\\\\\" \\\\\\"30\\\\\\"}\\" \\"{\\\\\\"42.0987159764083,19.0962472558022\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.0937801513544,19.1355469822884\\\\\\" \\\\\\"70\\\\\\"})\\"" "(fact (println (map \#(str %) (get-clues \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))) \=>\\n     (println \\"({\\\\\\"42.1006583570572,19.0912690758705\\\\\\" \\\\\\"40\\\\\\"}\\" \\"{\\\\\\"42.1070741587757,19.0890374779701\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.1014862389214,19.0935650467873\\\\\\" \\\\\\"30\\\\\\"}\\" \\"{\\\\\\"42.0987159764083,19.0962472558022\\\\\\" \\\\\\"70\\\\\\"}\\" \\"{\\\\\\"42.0937801513544,19.1355469822884\\\\\\" \\\\\\"70\\\\\\"})\\"))" "(get-my-category \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" ";; Switching to Recomendation.core-test namespace" "(get-my-category \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" ";; Switching to recommendation.repl namespace" "(start-server)" ";; Switching to Recomendation.core-test namespace" "(get-my-category \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(ns Recomendation.core-test\\n  (\:use midje.sweet\\n        recommendation.game-category)\\n   (\:import  [fi.foyt.foursqare.myapi ReadClues Foursquare]\\r\\n            [main Clue]))" "(get-my-category \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(fact (get-my-category \\"142670\\" \\"http\://localhost\:8181/test-xml\\") \=> (\\"travel\\" \\"irrelevant\\" \\"irrelevant\\" \\"social\\" \\"travel\\"))" "(str \\"(\\\\\\"travel\\\\\\" \\\\\\"irrelevant\\\\\\" \\\\\\"irrelevant\\\\\\" \\\\\\"social\\\\\\" \\\\\\"travel\\\\\\")\\")" "(map \#(str %) (get-my-category \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(println *1)" "(println *3)" "(fact (println (map \#(str %) (get-my-category \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))) \=>                \\n      (println (str \\"(\\\\\\"travel\\\\\\" \\\\\\"irrelevant\\\\\\" \\\\\\"irrelevant\\\\\\" \\\\\\"social\\\\\\" \\\\\\"travel\\\\\\")\\")))" ";; Switching to recommendation.neural-network namespace" "(get-vector \\"1,0,0,0,366,1\\")" "(clojure.core/ns Recomendation.core-test)\\n(fact \\n  (get-vector \\"1,0,0,0,366,1\\")\=>\\n  [\\"1\\" \\"0\\" \\"0\\" \\"0\\" \\"366\\" \\"1\\"])\\n(clojure.core/ns recommendation.neural-network)" "(sum-categories \\"1,3,4,0,366,1\\")" "(get-vector \\"1,3,4,0,366,1\\")" "(calculate-categories \\"1,3,4,0,366,1\\")" "(calculate-categories \\"1,3,4,0,366\\")" "(calculate-categories \\"1,3,4,0,1,366\\")" "(sum-categories \\"1,3,4,0,1,366\\")" " (get-vector \\"1,3,4,0,1,366\\")" "(sum-categories \\"1,3,4,0,1,366\\")" "(calculate-categories \\"1,3,4,0,1,366\\")" "(calculate-categories \\"5,0,0,0,1,600\\")" "(start-server)" "(get-clues-categories  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(map \#(str %) *1)" "(map \#(clojure.string/join  %) *1)" " (clojure.string/join (map \#(str %) *1))" " (clojure.string/join (map \#(str %) *2) \\" \\")" "(get-clues-categories  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(clojure.string/join (map \#(str %) (get-clues-categories  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")))" "(clojure.string/join (map \#(+ (str %) \\" \\") (get-clues-categories  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")))" "(clojure.string/join (map \#(str %) (get-clues-categories  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")) \\"/\\")" "(categories-count \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(call-get-result  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(get-relevant  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(str //\\"http\://192.168.10.109\:81/ReturnGame.aspx?gameNumber\=\\" gameNumber  \\"&username\=petar\\")" "(str //\\"http\://192.168.10.109\:81/ReturnGame.aspx?gameNumber\=\\" 1  \\"&username\=petar\\")" "(str \\"http\://192.168.10.109\:81/ReturnGame.aspx?gameNumber\=\\" gameNumber  \\"&username\=petar\\")" "(str \\"http\://192.168.10.109\:81/ReturnGame.aspx?gameNumber\=\\" 1  \\"&username\=petar\\")" "(start-server)" "(get-clues-categories)" "(start-server)" "(recommendation 41 3 \\"/resources/Test.csv\\")" "(recommendation 41 3 \\"resources/Test.csv\\")" "(recommendation 41 3 \\"/resources/Test.csv\\")" "(recommendation 41 3 \\"C\:\\\\Users\\\\Tijana\\\\git\\\\vujicictijana\\\\Geostep-NeuralNetwork\\\\Recommendation\\\\src\\\\resources\\\\resources\\\\Test.csv\\")" "(recommendation 41 3 \\"C\:/Users/Tijana/git/vujicictijana/Geostep-NeuralNetwork/Recommendation/src/resources\\")" "(recommendation 41 3 \\"C\:/Users/Tijana/git/vujicictijana/Geostep-NeuralNetwork/Recommendation/src/resources/resources/Test.csv\\")" "(recommendation 41 3 \\"C\:/Users/Tijana/git/vujicictijana/Geostep-NeuralNetwork/Recommendation/src/resources/Test.csv\\")" "(recommendation 41 3 \\"src/resources/Test.csv\\")" "data-list" "(type *1)" "data-list" "(.size() *1)" "(.size() data-list)" "(type *1)" "(.size data-list)" "(.size (recommendation 41 3 \\"src/resources/Test.csv\\"))" "(do (recommendation 41 3 \\"src/resources/Test.csv\\")\\n  (.size data-list))" "(prepare-item-data (first data-list))" "(prepare-xml data-list)" "(start-server)" "(home 41 3 \\"src/resources/Test.csv\\")" "(recommendation/recommendation 41 3 \\"src/resources/Test.csv\\" )" "(def data *1)" "data" "(home 41 3 \\"src/resources/Test.csv\\")" "(start-server)" "(java.net.URL. \\"localhost\:8181\\")" "(java.net.URL. \\"nrepl\://127.0.0.1\:60918\\")" "(java.net.URL. \\"nrepl\://127.0.0.1\\")" "(java.net.URL. \\"http\://localhost\:8181\\")" "(html/html-resource *1)" "(start-server)" "(java.net.URL. \\"http\://localhost\:8181\\")" "(html/html-resource *1)" "(java.net.URL. \\"http\://localhost\:8181/neural-network?game-id\=142670\\")" "(html/html-resource *1)" "(contains? *1 \\"irrelevant\\")" "(str *1)" "(def a *2)" "a" "(map \#(str %) *1)" "(contains? *1 \\"irrelevant\\")" "(.contains \\"ab\\" \\"a\\")" "(.contains a \\"a\\")" "(.contains a \\"irre\\")" "a" "(.contains a \\"irrelevant\\")" "(first a)" "(\:content a)" "(\:content *2)" "(first a)" "(\:content *1)" "(\:tag *1)" "(\:atrs *1)" "(\:content (first a))" "(\:attrs (first a))" "(java.net.URL. \\"http\://localhost\:8181/neural-network?game-id\=142670\\")" "(html/html-resource *1)" "(\:content *1)" "(\:content (first *2))" "(def a (map \#(str %) *1))" "a" "(.contains \\"aba\\" \\"b\\")" "(.contains a tag)" "(.contains a \\"tag\\")" "(.contains a \\"irrelevant\\")" "(println a)" "(.contains a \\",\\")" "(.contains \\",\\" a)" "a" "(type a)" " (clojure.string/join (map \#(str %) a))" "(.contains *1 \\",\\")" "(java.net.URL. \\"http\://localhost\:8181\\")" "(html/html-resource *1)" "(.contains *1 \\"Welcome\\")" " (clojure.string/join (map \#(str %) *2))" "(.contains *1 \\"Welcome\\")" " (do (start-server)\\r\\n    (.contains (clojure.string/join (map \#(str %) (html/html-resource (java.net.URL. \\"http\://localhost\:8181\\")))) \\"Welcome\\"))" "(html/html-resource (java.net.URL. \\"http\://localhost\:8181/home?user\=41&number\=3&file\=src/resources/Test.csv\\"))" " (.contains\\r\\n    (clojure.string/join \\r\\n      (map \#(str %) (html/html-resource (java.net.URL. \\"http\://localhost\:8181/home?user\=41&number\=3&file\=src/resources/Test.csv\\"))))\\r\\n      \\"\:item\\")" "(start-server)" "(calculate-categories \\"1,3,4,0,1,366\\")" "(double (/ 366) 1500)" "(double (/ 366 1500))" "(double (/ 1500 1500))" "(use 'criterium.core)" "(report-result (benchmark (Thread/sleep 1000) {\:verbose true}))" "(with-progress-reporting (bench (Thread/sleep 1000) \:verbose))" "(+ 1 3)" "(+ 1 2)" "(bench (Thread/sleep 1000))" "(use 'criterium.core)" "(+ 1 2)" "(use 'criterium.core)" "(bench (Thread/sleep 1000))" "(+ 1 2)" "(use 'criterium.core)" "(bench (+ 1 1))" "(with-progress-reporting (bench (+ 1 1)))" "(with-progress-reporting (quick-bench (+ 1 1)))" "(report-result (benchmark (Thread/sleep 1000) {\:verbose true}))" "(report-result (benchmark (+ 1 1) {\:verbose true}))" "(+ 1 3)" "(report-result (quick-benchmark (+ 1 3)))" "(report-result (quick-bench (+ 1 1)))" "(start-server)" "(def nn (.createFromFile NeuralNetwork \\"src/resources/Geostep.nnet\\"))" "(def nn (.createFromFile org.neuroph.core.NeuralNetwork \\"src/resources/Geostep.nnet\\"))" "(def nn (. NeuralNetwork (createFromFile \\"src/resources/Geostep.nnet\\")))" "(type *1)" "nn" "(type nn)" "(.setInput nn {11,22})" "(call-get-result  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(+ 1 1)" "(start-server)" "(ns repl)" "(start-server)" "(ns neuralnetwork.repl)" "(start-server)" "(ns neuralnetwork.neural-network)" "(call-get-result  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(calculate-categories (categories-count \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(double-array *1)" "(call-get-result  \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(start-server)" "(check-category \\"4d4b7105d754a06378d81259\\")" "(ns neuralnetwork.neural-network)" "(categories-count \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(ns neuralnetwork.repl)" "(start-server)" "(ns neuralnetwork.repl)" "(ns neuralnetwork.neural-network)" "(categories-count \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(get-vector *1)" "(calculate-categories \\"0,1,4,1,1,366,\\\\n\\")" "(calculate-input-data \\"0,1,4,1,1,366,\\\\n\\")" "(game-data \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(calculate-input-data (game-data \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(get-relevant(game-data \\"142670\\" \\"http\://localhost\:8181/test-xml\\"))" "(get-relevant \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(get-result \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(get-relevant \\"142670\\" \\"http\://localhost\:8181/test-xml\\")" "(start-server)" "(ns neuralnetwork.game-category)" "(get-clues 142670 \\"http\://192.168.10.109\:81/ReturnGame.aspx?gameNumber\=142670&username\=petar\\")" "(get-clues \\"142670\\" \\"http\://192.168.10.109\:81/ReturnGame.aspx?gameNumber\=142670&username\=petar\\")" "(ns neuralnetwork.repl)" "(start-server)" "(ns neuralnetwork.repl)" "(start-server)" "(is-game-relevant \\"142670\\")" "(build-xml \\"142670\\")" "(ns neuralnetwork.repl)" "(start-server)"]
eclipse.preferences.version=1
